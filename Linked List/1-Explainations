Explainations for the programs:-

Middle Element:-

1) First I found the size of the linked list by trversing till the end. so that i can write the program 
   with the 2 possible test cases. 
2) If the size is even then i travesed while temp.next.next!=None:
    a) temp is assigned to next of next
    b) temp1 is assigned to next
    c) the data of temp1 of next is returned.
3) If the size is odd then i trversed while temp.next!=None:
    a) temp is assigned to next of next
    b) temp1 is assigned to next
    c) the data of temp1 is returned.
    
 
Reverse Linked List:-

1) I have used recursion to reverse the linked list.

Refer to this link for the better explainatiomn: -  https://www.youtube.com/watch?v=KYH83T4q6Vs

Rotate by k:-

1) First I took to node variable temp and temp1 initialised as head.
2) I used temp1 to traverse till the end of the LinkedList and then I referenced the last node's next to head.
   because after the rotation the list will be continuing from last node itself.
3) I used temp to traverse till the k'th element of the Linked List.
4) I created a newnode and initialised it as temp of next. so it will start from k+1'th element.
5) Now dereference the temp of next as null/None.

Intersection Point in Y Shapped LinkedLists:-

1) Declared 2 temporary nodes initialised as head1 and head2.
2) Declared a HashMap with Node(address) as the key and Integer as the value.
3) Initialise int i=0 and x=-1
4) Run while loop till temp1 is not null.
   a) If map contains the Node(address) then inclease the value from 1 to 2 and break.
   b) If the Node(address) is uniquw then keep the key as 1.
5) Run while loop till temp2 is not null.
   a) If map contains the Node(address) then inclease the value from 1 to 2 and break.
   b) If the Node(address) is uniquw then keep the key as 1.
6) Create a Node newnode.
7) Initialise newnode to the key corresponding to the value = 2
8) Keep x as newnode's data.
9) Return x.

Logic.:- I saved the address (unique for all the elements except the intersection) as the key in the HashMap.
         1st I go from head1 to end of Linked List simultaneosly add the addresses to the HashMap. Now I started 
         from head2 to end of the Linked List simultaneosly add the addresses to the HashMap. now when I encounter
         the intersection point. the address is already present as a key in the HashMap. so the value is incremented
         by 1 and the break is applied. now get the key from the HashMap who has value=2, and then return the data of that node.
         
Remove loop in Linked List:-

1) I declared a HashSet in java to store the address of already visited nodes.
2) I declared 2 temp variables. one will move forward and another will move after that. 
3) Add a while loop with the conditions temp.next!=null and HashSet does not contain the address of temp.
   depicting we havent visited that node , implying the loop has not been encountered yet.
4) after the while loop ends. i have added an if condition for the conition if the temp comes out of the loop
   but temp.next is not null, therefor the loop is present so i terminate the loop by doing temp1.next=null. else
   the loop is not peresent and return void.


  
  
